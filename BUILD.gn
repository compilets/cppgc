declare_args() {
  # Enable heap reservation of size 4GB. Only possible for 64bit archs.
  cppgc_enable_caged_heap =
      current_cpu == "x64" || current_cpu == "arm64" ||
      current_cpu == "loong64" || current_cpu == "riscv64"
}

config("oilpan_config") {
  include_dirs = [ "include" ]
  defines = [
    "CPPGC_IS_STANDALONE",
  ]

  if (is_debug) {
    defines += [ "CPPGC_ENABLE_API_CHECKS" ]
  }

  if (cppgc_enable_caged_heap) {
    defines += [
      "CPPGC_CAGED_HEAP",
      "CPPGC_YOUNG_GENERATION",
      "CPPGC_POINTER_COMPRESSION",
    ]
  }

  if (!is_clang && is_win) {
    cflags_cc = [ "/wd4715" ]
  }
}

config("oilpan_internal_config") {
  include_dirs = [ "." ]
  if (!is_clang) {
    if (is_posix) {
      cflags_cc = [ "-Wno-return-type" ]
    } else if (is_win) {
      cflags_cc = [ "/wd4715" ]
    }
  }
}

source_set("cppgc") {
  public_configs = [ ":oilpan_config" ]
  configs += [ ":oilpan_internal_config" ]
  deps = [ ":v8_base" ]

  sources = [
    "src/heap/base/active-system-pages.cc",
    "src/heap/base/active-system-pages.h",
    "src/heap/base/basic-slot-set.h",
    "src/heap/base/bytes.h",
    "src/heap/base/cached-unordered-map.h",
    "src/heap/base/incremental-marking-schedule.cc",
    "src/heap/base/incremental-marking-schedule.h",
    "src/heap/base/memory-tagging.cc",
    "src/heap/base/memory-tagging.h",
    "src/heap/base/stack.cc",
    "src/heap/base/stack.h",
    "src/heap/base/worklist.cc",
    "src/heap/base/worklist.h",
    "src/heap/cppgc/allocation.cc",
    "src/heap/cppgc/caged-heap-local-data.cc",
    "src/heap/cppgc/caged-heap.cc",
    "src/heap/cppgc/caged-heap.h",
    "src/heap/cppgc/compaction-worklists.cc",
    "src/heap/cppgc/compaction-worklists.h",
    "src/heap/cppgc/compactor.cc",
    "src/heap/cppgc/compactor.h",
    "src/heap/cppgc/concurrent-marker.cc",
    "src/heap/cppgc/concurrent-marker.h",
    "src/heap/cppgc/explicit-management.cc",
    "src/heap/cppgc/free-list.cc",
    "src/heap/cppgc/free-list.h",
    "src/heap/cppgc/garbage-collector.h",
    "src/heap/cppgc/gc-info-table.cc",
    "src/heap/cppgc/gc-info-table.h",
    "src/heap/cppgc/gc-info.cc",
    "src/heap/cppgc/gc-invoker.cc",
    "src/heap/cppgc/gc-invoker.h",
    "src/heap/cppgc/globals.h",
    "src/heap/cppgc/heap-base.cc",
    "src/heap/cppgc/heap-base.h",
    "src/heap/cppgc/heap-config.h",
    "src/heap/cppgc/heap-consistency.cc",
    "src/heap/cppgc/heap-growing.cc",
    "src/heap/cppgc/heap-growing.h",
    "src/heap/cppgc/heap-object-header.cc",
    "src/heap/cppgc/heap-object-header.h",
    "src/heap/cppgc/heap-page.cc",
    "src/heap/cppgc/heap-page.h",
    "src/heap/cppgc/heap-space.cc",
    "src/heap/cppgc/heap-space.h",
    "src/heap/cppgc/heap-state.cc",
    "src/heap/cppgc/heap-statistics-collector.cc",
    "src/heap/cppgc/heap-statistics-collector.h",
    "src/heap/cppgc/heap-visitor.h",
    "src/heap/cppgc/heap.cc",
    "src/heap/cppgc/heap.h",
    "src/heap/cppgc/liveness-broker.cc",
    "src/heap/cppgc/liveness-broker.h",
    "src/heap/cppgc/logging.cc",
    "src/heap/cppgc/marker.cc",
    "src/heap/cppgc/marker.h",
    "src/heap/cppgc/marking-state.cc",
    "src/heap/cppgc/marking-state.h",
    "src/heap/cppgc/marking-verifier.cc",
    "src/heap/cppgc/marking-verifier.h",
    "src/heap/cppgc/marking-visitor.cc",
    "src/heap/cppgc/marking-visitor.h",
    "src/heap/cppgc/marking-worklists.cc",
    "src/heap/cppgc/marking-worklists.h",
    "src/heap/cppgc/member-storage.cc",
    "src/heap/cppgc/member-storage.h",
    "src/heap/cppgc/memory.cc",
    "src/heap/cppgc/memory.h",
    "src/heap/cppgc/metric-recorder.h",
    "src/heap/cppgc/name-trait.cc",
    "src/heap/cppgc/object-allocator.cc",
    "src/heap/cppgc/object-allocator.h",
    "src/heap/cppgc/object-poisoner.h",
    "src/heap/cppgc/object-size-trait.cc",
    "src/heap/cppgc/object-start-bitmap.h",
    "src/heap/cppgc/object-view.h",
    "src/heap/cppgc/page-memory.cc",
    "src/heap/cppgc/page-memory.h",
    "src/heap/cppgc/persistent-node.cc",
    "src/heap/cppgc/platform.cc",
    "src/heap/cppgc/platform.h",
    "src/heap/cppgc/pointer-policies.cc",
    "src/heap/cppgc/prefinalizer-handler.cc",
    "src/heap/cppgc/prefinalizer-handler.h",
    "src/heap/cppgc/process-heap-statistics.cc",
    "src/heap/cppgc/process-heap-statistics.h",
    "src/heap/cppgc/process-heap.cc",
    "src/heap/cppgc/process-heap.h",
    "src/heap/cppgc/raw-heap.cc",
    "src/heap/cppgc/raw-heap.h",
    "src/heap/cppgc/remembered-set.cc",
    "src/heap/cppgc/remembered-set.h",
    "src/heap/cppgc/stats-collector.cc",
    "src/heap/cppgc/stats-collector.h",
    "src/heap/cppgc/sweeper.cc",
    "src/heap/cppgc/sweeper.h",
    "src/heap/cppgc/task-handle.h",
    "src/heap/cppgc/testing.cc",
    "src/heap/cppgc/trace-event.h",
    "src/heap/cppgc/trace-trait.cc",
    "src/heap/cppgc/unmarker.h",
    "src/heap/cppgc/virtual-memory.cc",
    "src/heap/cppgc/virtual-memory.h",
    "src/heap/cppgc/visitor.cc",
    "src/heap/cppgc/visitor.h",
    "src/heap/cppgc/write-barrier.cc",
    "src/heap/cppgc/write-barrier.h",
    "src/libplatform/default-foreground-task-runner.cc",
    "src/libplatform/default-foreground-task-runner.h",
    "src/libplatform/default-job.cc",
    "src/libplatform/default-job.h",
    "src/libplatform/default-platform.cc",
    "src/libplatform/default-platform.h",
    "src/libplatform/default-thread-isolated-allocator.cc",
    "src/libplatform/default-thread-isolated-allocator.h",
    "src/libplatform/default-worker-threads-task-runner.cc",
    "src/libplatform/default-worker-threads-task-runner.h",
    "src/libplatform/delayed-task-queue.cc",
    "src/libplatform/delayed-task-queue.h",
    "src/libplatform/etw/etw-provider-win.h",
    "src/libplatform/task-queue.cc",
    "src/libplatform/task-queue.h",
    "src/libplatform/tracing/recorder.h",
    "src/libplatform/tracing/trace-buffer.cc",
    "src/libplatform/tracing/trace-buffer.h",
    "src/libplatform/tracing/trace-config.cc",
    "src/libplatform/tracing/trace-event-listener.h",
    "src/libplatform/tracing/trace-object.cc",
    "src/libplatform/tracing/trace-writer.cc",
    "src/libplatform/tracing/trace-writer.h",
    "src/libplatform/tracing/tracing-controller.cc",
    "src/libplatform/worker-thread.cc",
    "src/libplatform/worker-thread.h",
    "src/tracing/trace-event.h",
  ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

source_set("v8_base") {
  configs += [ ":oilpan_internal_config" ]

  sources = [
    "src/base/abort-mode.cc",
    "src/base/abort-mode.h",
    "src/base/address-region.h",
    "src/base/atomic-utils.h",
    "src/base/atomicops.h",
    "src/base/base-export.h",
    "src/base/bit-field.h",
    "src/base/bits-iterator.h",
    "src/base/bits.cc",
    "src/base/bits.h",
    "src/base/bounded-page-allocator.cc",
    "src/base/bounded-page-allocator.h",
    "src/base/bounds.h",
    "src/base/build_config.h",
    "src/base/compiler-specific.h",
    "src/base/container-utils.h",
    "src/base/contextual.h",
    "src/base/cpu.cc",
    "src/base/cpu.h",
    "src/base/debug/stack_trace.cc",
    "src/base/debug/stack_trace.h",
    "src/base/discriminated-union.h",
    "src/base/division-by-constant.cc",
    "src/base/division-by-constant.h",
    "src/base/doubly-threaded-list.h",
    "src/base/emulated-virtual-address-subspace.cc",
    "src/base/emulated-virtual-address-subspace.h",
    "src/base/enum-set.h",
    "src/base/export-template.h",
    "src/base/file-utils.cc",
    "src/base/file-utils.h",
    "src/base/flags.h",
    "src/base/free_deleter.h",
    "src/base/functional.h",
    "src/base/hashmap-entry.h",
    "src/base/hashmap.h",
    "src/base/ieee754.cc",
    "src/base/ieee754.h",
    "src/base/immediate-crash.h",
    "src/base/intrusive-set.h",
    "src/base/ios-headers.h",
    "src/base/iterator.h",
    "src/base/lazy-instance.h",
    "src/base/logging.cc",
    "src/base/logging.h",
    "src/base/macros.h",
    "src/base/memory.h",
    "src/base/numbers/bignum-dtoa.cc",
    "src/base/numbers/bignum-dtoa.h",
    "src/base/numbers/bignum.cc",
    "src/base/numbers/bignum.h",
    "src/base/numbers/cached-powers.cc",
    "src/base/numbers/cached-powers.h",
    "src/base/numbers/diy-fp.cc",
    "src/base/numbers/diy-fp.h",
    "src/base/numbers/double.h",
    "src/base/numbers/dtoa.cc",
    "src/base/numbers/dtoa.h",
    "src/base/numbers/fast-dtoa.cc",
    "src/base/numbers/fast-dtoa.h",
    "src/base/numbers/fixed-dtoa.cc",
    "src/base/numbers/fixed-dtoa.h",
    "src/base/numbers/strtod.cc",
    "src/base/numbers/strtod.h",
    "src/base/once.cc",
    "src/base/once.h",
    "src/base/optional.h",
    "src/base/overflowing-math.h",
    "src/base/page-allocator.cc",
    "src/base/page-allocator.h",
    "src/base/platform/condition-variable.cc",
    "src/base/platform/condition-variable.h",
    "src/base/platform/elapsed-timer.h",
    "src/base/platform/memory-protection-key.cc",
    "src/base/platform/memory-protection-key.h",
    "src/base/platform/memory.h",
    "src/base/platform/mutex.cc",
    "src/base/platform/mutex.h",
    "src/base/platform/platform.cc",
    "src/base/platform/platform.h",
    "src/base/platform/semaphore.cc",
    "src/base/platform/semaphore.h",
    "src/base/platform/time.cc",
    "src/base/platform/time.h",
    "src/base/platform/wrappers.h",
    "src/base/platform/yield-processor.h",
    "src/base/pointer-with-payload.h",
    "src/base/qnx-math.h",
    "src/base/region-allocator.cc",
    "src/base/region-allocator.h",
    "src/base/ring-buffer.h",
    "src/base/safe_conversions.h",
    "src/base/safe_conversions_arm_impl.h",
    "src/base/safe_conversions_impl.h",
    "src/base/sanitizer/asan.h",
    "src/base/sanitizer/lsan-page-allocator.cc",
    "src/base/sanitizer/lsan-page-allocator.h",
    "src/base/sanitizer/lsan-virtual-address-space.cc",
    "src/base/sanitizer/lsan-virtual-address-space.h",
    "src/base/sanitizer/lsan.h",
    "src/base/sanitizer/msan.h",
    "src/base/sanitizer/tsan.h",
    "src/base/small-map.h",
    "src/base/small-vector.h",
    "src/base/string-format.h",
    "src/base/strings.cc",
    "src/base/strings.h",
    "src/base/sys-info.cc",
    "src/base/sys-info.h",
    "src/base/template-meta-programming/algorithm.h",
    "src/base/template-meta-programming/functional.h",
    "src/base/template-meta-programming/list.h",
    "src/base/template-meta-programming/string-literal.h",
    "src/base/template-utils.h",
    "src/base/threaded-list.h",
    "src/base/timezone-cache.h",
    "src/base/utils/random-number-generator.cc",
    "src/base/utils/random-number-generator.h",
    "src/base/vector.h",
    "src/base/virtual-address-space-page-allocator.cc",
    "src/base/virtual-address-space-page-allocator.h",
    "src/base/virtual-address-space.cc",
    "src/base/virtual-address-space.h",
    "src/base/vlq-base64.cc",
    "src/base/vlq-base64.h",
    "src/base/vlq.h",
  ]

  if (is_posix) {
    sources += [
      "src/base/platform/platform-posix.cc",
      "src/base/platform/platform-posix.h",
      "src/base/platform/platform-posix-time.cc",
      "src/base/platform/platform-posix-time.h",
      "src/base/debug/stack_trace_posix.cc",
    ]
  }
  if (is_linux) {
    sources += [
      "src/base/platform/platform-linux.cc",
      "src/base/platform/platform-linux.h",
    ]
  } else if (is_mac) {
    sources += [
      "src/base/platform/platform-darwin.cc",
    ]
  } else if (is_win) {
    sources += [
      "src/base/debug/stack_trace_win.cc",
      "src/base/platform/platform-win32.cc",
      "src/base/platform/platform-win32.h",
    ]
  }

  if (is_clang || !is_win) {
    if (current_cpu == "x64") {
      if (is_win) {
        # Prefer a masm version with unwind directives.
        sources += [ "src/heap/base/asm/x64/push_registers_masm.asm" ]
      } else {
        sources += [ "src/heap/base/asm/x64/push_registers_asm.cc" ]
      }
    } else if (current_cpu == "x86") {
      sources += [ "src/heap/base/asm/ia32/push_registers_asm.cc" ]
    } else if (current_cpu == "arm") {
      sources += [ "src/heap/base/asm/arm/push_registers_asm.cc" ]
    } else if (current_cpu == "arm64") {
      sources += [ "src/heap/base/asm/arm64/push_registers_asm.cc" ]
    } else if (current_cpu == "ppc64") {
      sources += [ "src/heap/base/asm/ppc/push_registers_asm.cc" ]
    } else if (current_os == "zos") {
      sources += [ "src/heap/base/asm/zos/push_registers_asm.cc" ]
    } else if (current_cpu == "s390x") {
      sources += [ "src/heap/base/asm/s390/push_registers_asm.cc" ]
    } else if (current_cpu == "mips64el") {
      sources += [ "src/heap/base/asm/mips64/push_registers_asm.cc" ]
    } else if (current_cpu == "loong64") {
      sources += [ "src/heap/base/asm/loong64/push_registers_asm.cc" ]
    } else if (current_cpu == "riscv64" || current_cpu == "riscv32") {
      sources += [ "src/heap/base/asm/riscv/push_registers_asm.cc" ]
    }
  } else if (is_win) {
    if (current_cpu == "x64") {
      sources += [ "src/heap/base/asm/x64/push_registers_masm.asm" ]
    } else if (current_cpu == "x86") {
      sources += [ "src/heap/base/asm/ia32/push_registers_masm.asm" ]
    } else if (current_cpu == "arm64") {
      sources += [ "src/heap/base/asm/arm64/push_registers_masm.S" ]
    }
  }
}

executable("cppgc_sample") {
  deps = [ ":cppgc" ]
  include_dirs = [ "." ]
  sources = [ "samples/cppgc/hello-world.cc" ]
}

executable("cppgc_unittests") {
  testonly = true
  deps = [
    ":cppgc",
    "//testing/gmock",
    "//testing/gtest",
  ]

  sources = [
    "test/unittests/heap/cppgc/run-all-unittests.cc",
    "test/unittests/heap/cppgc/allocation-unittest.cc",
    "test/unittests/heap/cppgc/caged-heap-unittest.cc",
    "test/unittests/heap/cppgc/compactor-unittest.cc",
    "test/unittests/heap/cppgc/concurrent-marking-unittest.cc",
    "test/unittests/heap/cppgc/concurrent-sweeper-unittest.cc",
    "test/unittests/heap/cppgc/cross-thread-persistent-unittest.cc",
    "test/unittests/heap/cppgc/custom-spaces-unittest.cc",
    "test/unittests/heap/cppgc/ephemeron-pair-unittest.cc",
    "test/unittests/heap/cppgc/explicit-management-unittest.cc",
    "test/unittests/heap/cppgc/finalizer-trait-unittest.cc",
    "test/unittests/heap/cppgc/free-list-unittest.cc",
    "test/unittests/heap/cppgc/garbage-collected-unittest.cc",
    "test/unittests/heap/cppgc/gc-info-unittest.cc",
    "test/unittests/heap/cppgc/gc-invoker-unittest.cc",
    "test/unittests/heap/cppgc/heap-growing-unittest.cc",
    "test/unittests/heap/cppgc/heap-object-header-unittest.cc",
    "test/unittests/heap/cppgc/heap-page-unittest.cc",
    "test/unittests/heap/cppgc/heap-registry-unittest.cc",
    "test/unittests/heap/cppgc/heap-statistics-collector-unittest.cc",
    "test/unittests/heap/cppgc/heap-unittest.cc",
    "test/unittests/heap/cppgc/liveness-broker-unittest.cc",
    "test/unittests/heap/cppgc/logging-unittest.cc",
    "test/unittests/heap/cppgc/marker-unittest.cc",
    "test/unittests/heap/cppgc/marking-verifier-unittest.cc",
    "test/unittests/heap/cppgc/marking-visitor-unittest.cc",
    "test/unittests/heap/cppgc/member-unittest.cc",
    "test/unittests/heap/cppgc/metric-recorder-unittest.cc",
    "test/unittests/heap/cppgc/minor-gc-unittest.cc",
    "test/unittests/heap/cppgc/name-trait-unittest.cc",
    "test/unittests/heap/cppgc/object-size-trait-unittest.cc",
    "test/unittests/heap/cppgc/object-start-bitmap-unittest.cc",
    "test/unittests/heap/cppgc/page-memory-unittest.cc",
    "test/unittests/heap/cppgc/persistent-family-unittest.cc",
    "test/unittests/heap/cppgc/platform-unittest.cc",
    "test/unittests/heap/cppgc/prefinalizer-unittest.cc",
    "test/unittests/heap/cppgc/sanitizer-unittest.cc",
    "test/unittests/heap/cppgc/stack-unittest.cc",
    "test/unittests/heap/cppgc/stats-collector-scopes-unittest.cc",
    "test/unittests/heap/cppgc/stats-collector-unittest.cc",
    "test/unittests/heap/cppgc/sweeper-unittest.cc",
    "test/unittests/heap/cppgc/test-platform.cc",
    "test/unittests/heap/cppgc/test-platform.h",
    "test/unittests/heap/cppgc/testing-unittest.cc",
    "test/unittests/heap/cppgc/tests.cc",
    "test/unittests/heap/cppgc/tests.h",
    "test/unittests/heap/cppgc/visitor-unittest.cc",
    "test/unittests/heap/cppgc/weak-container-unittest.cc",
    "test/unittests/heap/cppgc/workloads-unittest.cc",
    "test/unittests/heap/cppgc/write-barrier-unittest.cc",
  ]

  if (cppgc_enable_caged_heap) {
    sources += [ "test/unittests/heap/cppgc/age-table-unittest.cc" ]
  }

  if (!is_clang && is_win) {
    cflags_cc = [ "/wd4267" ]
  }
}
